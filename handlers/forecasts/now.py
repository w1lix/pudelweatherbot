from datetime import datetime

from aiogram import Bot, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from config import BOT_TOKEN
from handlers.commands import Form
from keyboards.inline import to_detail_now, to_main_now
from keyboards.reply import reply_keyboard_main
from tools.create_response_owm import get_data_now, get_data_first
from tools.rework_dict import rework_now

router = Router()
bot = Bot(token=BOT_TOKEN)

days = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞",
        "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"]


# —Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
@router.message(Form.request_city_now, F.content_type.in_({'text', 'location'}))
async def tomorrow(m: Message, state: FSMContext) -> None:
    try:
        weekday = datetime.today().weekday()

        await bot.send_chat_action(m.chat.id, 'typing')

        # –ø—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–µ–π
        if not m.location:
            data = await get_data_now(await get_data_first(m.text))
            re_data = rework_now(data)
        else:
            data = await get_data_now(  # –ø–æ–ª—É—á–µ–Ω–∏–µ json –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                [m.location.latitude, m.location.longitude])
            re_data = rework_now(data)  # –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è

        await m.answer_sticker(
            r"CAACAgIAAxkBAAEFxwRjGK96VU-SA-5NEkRlbKWVxzIDrgAC3AkAApek8EpUZ7lMIqYlaSkE",
            reply_markup=reply_keyboard_main())

        await m.reply(
            f"‚≠êÔ∏è {days[weekday]}, —Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ <b>| {re_data['temp']}¬∞:</b>\n\n"
            f"üèô <b>—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {re_data['temp']}¬∞\n"
            f"üåá <b>–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:</b> {re_data['feels_like']}¬∞\n\n"
            f"üå∫ <b>—Ä–∞—Å—Å–≤–µ—Ç: </b>{re_data['sunrise'].strftime('%H:%M')}\n"
            f"üå∏ <b>–∑–∞–∫–∞—Ç: </b>{re_data['sunset'].strftime('%H:%M')}\n"
            f"üåº <b>—Å–≤–µ—Ç–æ–≤–æ–π –¥–µ–Ω—å: </b>{re_data['ldr'][0]} —á {re_data['ldr'][1]} –º–∏–Ω\n\n"
            f"<b><u>{re_data['descr']}</u></b>", reply_markup=to_detail_now())

        await state.clear()

        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ state –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
        await state.update_data(city=m.text, re_data=re_data, wd=weekday)

    except KeyError:
        await m.answer_sticker(
            r'CAACAgIAAxkBAAEFzWNjHhsV_39aP-iBk7ghBQ7B4zpZ5AACgxAAAmuA8UvdlI_YEKj09ykE')
        await m.reply("üòê <b>–æ—à–∏–±–∫–∞!</b> –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n‚Ü™Ô∏è <b>–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É</b>")


# –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
@router.callback_query(F.data == 'detail_now')
async def show_detail_info(c: CallbackQuery, state: FSMContext) -> None:
    await c.answer()

    try:
        # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö state –∏–∑ —É–∂–µ –∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        state_data = await state.get_data()
        re_data = state_data['re_data']

        await c.message.edit_text(
            f"<b>üåü —Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞</b> <b>| {re_data['temp']}¬∞:</b>\n\n"
            f"‚òÅÔ∏è <b>–æ–±–ª–∞—á–Ω–æ—Å—Ç—å: </b>{re_data['clouds']}%\n"
            f"üíß <b>–≤–ª–∞–∂–Ω–æ—Å—Ç—å: </b>{re_data['humidity']}%\n"
            f"üí® <b>—Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: </b>{re_data['wind_speed']} –º/c\n"
            f"üß≠ <b>–≤–µ—Ç–µ—Ä: </b>{re_data['wind_direction']}\n"
            f"üå± <b>—Ç–æ—á–∫–∞ —Ä–æ—Å—ã: </b>{re_data['dew_point']}¬∞\n"
            f"üå° <b>–¥–∞–≤–ª–µ–Ω–∏–µ: </b>{re_data['pressure']} –º–º —Ä—Ç. —Å—Ç.\n"
            f"‚òÄÔ∏è <b>–£–§-–∏–Ω–¥–µ–∫—Å: </b>{re_data['uvi']}, {re_data['uvt']}\n\n"
            f"<b><u>{re_data['descr']}</u></b>", reply_markup=to_main_now())

    except KeyError:
        await c.message.edit_text("ü´° <b>–Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "
                                  "—Å –Ω–æ–≤—ã–º –ø—Ä–æ–≥–Ω–æ–∑–æ–º!</b>")


# –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–≤–æ–¥–∫–µ
@router.callback_query(F.data == "back_now")
async def show_main_info(c: CallbackQuery, state: FSMContext) -> None:
    await c.answer()

    try:
        # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö state –∏–∑ —É–∂–µ –∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        state_data = await state.get_data()
        re_data = state_data['re_data']

        await c.message.edit_text(
            f"‚≠êÔ∏è <b>—Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞</b> <b>| {re_data['temp']}¬∞:</b>\n\n"
            f"üèô <b>—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {re_data['temp']}¬∞\n"
            f"üåá <b>–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:</b> {re_data['feels_like']}¬∞\n\n"
            f"üå∫ <b>—Ä–∞—Å—Å–≤–µ—Ç: </b>{re_data['sunrise'].strftime('%H:%M')}\n"
            f"üå∏ <b>–∑–∞–∫–∞—Ç: </b>{re_data['sunset'].strftime('%H:%M')}\n"
            f"üåº <b>—Å–≤–µ—Ç–æ–≤–æ–π –¥–µ–Ω—å: </b>{re_data['ldr'][0]} —á {re_data['ldr'][1]} –º–∏–Ω\n\n"
            f"<b><u>{re_data['descr']}</u></b>", reply_markup=to_detail_now())

    except KeyError:
        await c.message.edit_text("ü´° <b>–Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "
                                  "—Å –Ω–æ–≤—ã–º –ø—Ä–æ–≥–Ω–æ–∑–æ–º!</b>")
